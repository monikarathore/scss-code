$font-lato-regular:    latoregular, sans-serif;
$font-lato-bold:    latobold, sans-serif;
$font-lato-black:    latoblack, sans-serif;
$font-lato-light:    latolight, sans-serif;
$primary-color: #313b3d;
$limpetShell-color: #90CAD6;
$white-color:#fff;
$padding10Px: 10px;
$lightGray: #809a9f;
$linkDecorationNone:none;
$spaceRight5px: 5px;
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
// font sizes responsive
$breakpoints: (
  'small':    480px,
  'medium':   720px,
  'large':    960px,
  'x-large':  1280px
);

$text-sizing: (
  'centi': (
    'small': (
      'font-size': 12px,
    )
  ),
  'deci': (
    'small': (
      'font-size': 14px,
    )
  ),
  'base': (
    'small': (
      'font-size': 16px,
    )
  ),
  'deca': (
    'small': (
      'font-size': 18px,
    ),
    'large': (
      'font-size': 20px,
    )
  ),
  'hecto': (
    'small': (
      'font-size': 22px,
    ),
    'large': (
      'font-size': 24px,
    )
  ),
  'kilo': (
    'small': (
      'font-size': 24px,
    ),
    'large': (
      'font-size': 28px,
    )
  ),
  'mega': (
    'small': (
      'font-size': 36px,
    ),
    'large': (
      'font-size': 40px,
    )
  )
);

@function breakpoint($breakpoint-name) {
  $breakpoint-value: map-get($breakpoints, $breakpoint-name);

  @if $breakpoint-value {
    @return $breakpoint-value;
  }
}

@function text-breakpoints-for($text-size) {
  $text-breakpoints: map-get($text-sizing, $text-size);

  @if $text-breakpoints {
    @return $text-breakpoints;
  }
}

@function text-properties-for($text-size, $breakpoint-name) {
  $text-breakpoints: text-breakpoints-for($text-size);
  $text-properties: map-get($text-breakpoints, $breakpoint-name);

  @if $text-properties {
    @return $text-properties;
  }

}

@mixin respond-above($breakpoint-name) {
  $breakpoint-value: breakpoint($breakpoint-name);

  @if $breakpoint-value {
    @media screen and (min-width: $breakpoint-value) {
      @content;
    }
  }
}

@mixin text-size($text-size, $breakpoint-name: 'small') {
  $text-size-properties: text-properties-for($text-size, $breakpoint-name);

  @if $text-size-properties {
    font-size: map-get($text-size-properties, 'font-size');
    line-height: map-get($text-size-properties, 'line-height');
  }
}

@mixin responsive-text-size($text-size, $default-breakpoint: 'small') {
  @include text-size($text-size, $default-breakpoint);

  $text-breakpoints-map: text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $breakpoint-name in $text-breakpoints-keys {
    @if $breakpoint-name != $default-breakpoint {
      @include respond-above($breakpoint-name) {
        @include text-size($text-size, $breakpoint-name);
      }
    }
  }
}
// font sizes responsive

